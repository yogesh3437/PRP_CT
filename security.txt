1. Configure Spring Security
Create a custom security configuration class that extends WebSecurityConfigurerAdapter.

Example: Security Configuration
java
Copy code
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable() // For simplicity; enable in production with proper settings
            .authorizeRequests()
                .antMatchers("/public/**", "/login", "/register").permitAll() // Public endpoints
                .antMatchers("/admin/**").hasRole("ADMIN") // Only ADMIN role can access
                .antMatchers("/user/**").hasRole("USER") // Only USER role can access
                .anyRequest().authenticated() // All other endpoints require authentication
            .and()
            .formLogin()
                .loginPage("/login") // Custom login page
                .permitAll()
            .and()
            .logout()
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout")
                .permitAll();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        // In-memory user details for testing (Replace with database configuration in production)
        auth.inMemoryAuthentication()
            .withUser("admin")
                .password(passwordEncoder().encode("admin123"))
                .roles("ADMIN")
            .and()
            .withUser("user")
                .password(passwordEncoder().encode("user123"))
                .roles("USER");
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
2. Define Endpoints
Public Endpoints
Accessible by everyone (no authentication required).
java
Copy code
@Controller
@RequestMapping("/public")
public class PublicController {

    @GetMapping("/home")
    public String home() {
        return "public/home"; // Thymeleaf template
    }
}
User-Specific Endpoints
Restricted to users with the USER role.
java
Copy code
@Controller
@RequestMapping("/user")
public class UserController {

    @GetMapping("/dashboard")
    public String userDashboard() {
        return "user/dashboard"; // Thymeleaf template
    }
}
Admin-Specific Endpoints
Restricted to users with the ADMIN role.
java
Copy code
@Controller
@RequestMapping("/admin")
public class AdminController {

    @GetMapping("/dashboard")
    public String adminDashboard() {
        return "admin/dashboard"; // Thymeleaf template
    }
}
3. Thymeleaf Templates with Role-Based Links
You can dynamically display menu links or content based on the authenticated user's roles using Thymeleaf Security Extras.

Add Security Extras Dependency
If you donâ€™t already have it, add the following dependency to your pom.xml:

xml
Copy code
<dependency>
    <groupId>org.thymeleaf.extras</groupId>
    <artifactId>thymeleaf-extras-springsecurity5</artifactId>
</dependency>
Example Header with Role-Based Links
html
Copy code
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="/">MyApp</a>
    <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto">
            <li class="nav-item">
                <a class="nav-link" href="/public/home">Public Home</a>
            </li>
            <li class="nav-item" th:if="${isAuthenticated()}">
                <a class="nav-link" href="/user/dashboard">User Dashboard</a>
            </li>
            <li class="nav-item" th:if="${hasRole('ADMIN')}">
                <a class="nav-link" href="/admin/dashboard">Admin Dashboard</a>
            </li>
        </ul>
        <ul class="navbar-nav">
            <li class="nav-item" th:if="${isAuthenticated()}">
                <form action="/logout" method="post">
                    <button class="btn btn-outline-danger" type="submit">Logout</button>
                </form>
            </li>
            <li class="nav-item" th:if="${!isAuthenticated()}">
                <a class="nav-link" href="/login">Login</a>
            </li>
        </ul>
    </div>
</nav>
4. Database-Based Authentication (Optional)
For a production-ready app, replace the in-memory authentication with database-based authentication.

Example User Entity
java
Copy code
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
    private String password;
    private String role; // e.g., "ROLE_ADMIN" or "ROLE_USER"

    // Getters and setters
}
UserRepository
java
Copy code
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}
Custom UserDetailsService
java
Copy code
@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                AuthorityUtils.createAuthorityList(user.getRole())
        );
    }
}
Update Security Configuration
java
Copy code
@Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.userDetailsService(customUserDetailsService).passwordEncoder(passwordEncoder());
}
5. Test the Application
Try accessing /user/dashboard and /admin/dashboard with users having the appropriate roles.
Ensure unauthorized users are redirected to the login page.
This setup provides flexible, role-based access control in a Spring Boot MVC application with Thymeleaf. Let me know if you need further customization!


/////////////////

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/admin/**").hasRole("ADMIN")
                .antMatchers("/user/**").hasRole("USER")
                .antMatchers("/**").permitAll()
                .and()
            .formLogin()
                .loginPage("/login")
                .permitAll()
                .and()
            .logout()
                .permitAll();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}



@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
            .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        
        return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), getAuthorities(user));
    }

    private Collection<? extends GrantedAuthority> getAuthorities(User user) {
        Set<GrantedAuthority> authorities = new HashSet<>();
        for (Role role : user.getRoles()) {
            authorities.add(new SimpleGrantedAuthority(role.getName()));
        }
        return authorities;
    }
}
