
Creating a Spring Boot CRUD application with Thymeleaf, Bootstrap, login functionality, user registration, email OTP validation, and a PostgreSQL database involves several steps. Below is a comprehensive guide to implement this:

1. Setting Up the Project
Create a new Spring Boot project:

Use Spring Initializr or your IDE.
Include the following dependencies:
Spring Web
Spring Data JPA
PostgreSQL Driver
Thymeleaf
Spring Security
Spring Boot DevTools (optional for development)
Java Mail Sender (for email)
Set up application.properties (or application.yml):

properties
Copy code
spring.datasource.url=jdbc:postgresql://localhost:5432/your_db_name
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.mail.host=smtp.example.com
spring.mail.port=587
spring.mail.username=your_email@example.com
spring.mail.password=your_email_password
spring.mail.protocol=smtp
2. Database Schema
Create the necessary tables in PostgreSQL. Use Entity annotations in Java to define these tables:

java
Copy code
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
    private String email;
    private String password;
    private boolean enabled;
    private String otp;
    
    // Getters and setters
}
3. Create Repository Interfaces
Define the repository for database interaction.

java
Copy code
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
    Optional<User> findByUsername(String username);
}
4. Implement Email OTP Validation
Use Spring Boot’s JavaMailSender to send OTPs.

Service for sending emails:
java
Copy code
@Service
public class EmailService {
    @Autowired
    private JavaMailSender mailSender;

    public void sendOtpEmail(String toEmail, String otp) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(toEmail);
        message.setSubject("Your OTP Code");
        message.setText("Your OTP is: " + otp);
        mailSender.send(message);
    }
}
Generate OTP:
java
Copy code
public String generateOtp() {
    return String.valueOf((int)(Math.random() * 900000) + 100000); // 6-digit OTP
}
5. User Registration and Login
Registration Controller:
java
Copy code
@Controller
public class RegistrationController {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EmailService emailService;

    @PostMapping("/register")
    public String registerUser(@ModelAttribute User user, Model model) {
        String otp = generateOtp();
        user.setOtp(otp);
        user.setEnabled(false);
        userRepository.save(user);

        emailService.sendOtpEmail(user.getEmail(), otp);

        model.addAttribute("email", user.getEmail());
        return "verifyOtp"; // A Thymeleaf template for OTP verification
    }

    @PostMapping("/verify-otp")
    public String verifyOtp(@RequestParam String email, @RequestParam String otp, Model model) {
        Optional<User> userOpt = userRepository.findByEmail(email);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            if (user.getOtp().equals(otp)) {
                user.setEnabled(true);
                user.setOtp(null); // Clear OTP after verification
                userRepository.save(user);
                return "login"; // Redirect to login page
            }
        }
        model.addAttribute("error", "Invalid OTP");
        return "verifyOtp";
    }
}
Login Configuration (Spring Security):
java
Copy code
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Autowired
    private UserDetailsService userDetailsService;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/register", "/verify-otp", "/css/**").permitAll()
            .anyRequest().authenticated()
            .and()
            .formLogin()
            .loginPage("/login").permitAll()
            .and()
            .logout().permitAll();
    }
}
Custom UserDetailsService:
java
Copy code
@Service
public class CustomUserDetailsService implements UserDetailsService {
    @Autowired
    private UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        return new org.springframework.security.core.userdetails.User(
                user.getUsername(), user.getPassword(), user.isEnabled(), true, true, true, 
                AuthorityUtils.createAuthorityList("ROLE_USER")
        );
    }
}
6. CRUD Operations for Entity
Create controllers, services, and Thymeleaf templates for your CRUD operations.

Example Controller:
java
Copy code
@Controller
@RequestMapping("/items")
public class ItemController {
    @Autowired
    private ItemRepository itemRepository;

    @GetMapping
    public String listItems(Model model) {
        model.addAttribute("items", itemRepository.findAll());
        return "itemList"; // Thymeleaf template
    }

    @GetMapping("/create")
    public String createItemForm(Model model) {
        model.addAttribute("item", new Item());
        return "itemForm"; // Thymeleaf template
    }

    @PostMapping
    public String saveItem(@ModelAttribute Item item) {
        itemRepository.save(item);
        return "redirect:/items";
    }
}
7. Frontend with Thymeleaf and Bootstrap
Use Thymeleaf templates for rendering forms and Bootstrap for styling.

Example Registration Form:
html
Copy code
<form action="/register" method="post">
    <div class="form-group">
        <label for="username">Username</label>
        <input type="text" id="username" name="username" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
8. Run the Application
Start PostgreSQL and create the database if not already done.
Run the Spring Boot application.
Access the endpoints in your browser (e.g., http://localhost:8080/register).
This setup covers all the major components of the application. Let me know if you'd like further details on specific parts!






You said:
otp verification page
ChatGPT said:
ChatGPT
Here’s an example of a simple OTP Verification Page implemented using Thymeleaf and styled with Bootstrap:

Thymeleaf Template: verifyOtp.html
html
Copy code
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Verify OTP</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header text-center">
                    <h4>OTP Verification</h4>
                </div>
                <div class="card-body">
                    <form action="/verify-otp" method="post">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" id="email" name="email" class="form-control" 
                                   th:value="${email}" readonly required>
                        </div>
                        <div class="mb-3">
                            <label for="otp" class="form-label">OTP</label>
                            <input type="text" id="otp" name="otp" class="form-control" placeholder="Enter OTP" required>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Verify</button>
                        </div>
                    </form>
                    <div class="mt-3 text-danger text-center" th:if="${error}">
                        <p th:text="${error}"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
Key Features of the Template
Input Fields:

email (readonly): Pre-filled with the user’s email, passed from the controller.
otp: Allows the user to enter the OTP received via email.
Error Handling:

Displays an error message (error) if OTP verification fails. The message is set in the controller.
Styling:

Uses Bootstrap for a clean, responsive design.
Form Submission:

Submits the form via POST to /verify-otp.
Controller Method for OTP Verification
java
Copy code
@PostMapping("/verify-otp")
public String verifyOtp(@RequestParam String email, @RequestParam String otp, Model model) {
    Optional<User> userOpt = userRepository.findByEmail(email);
    if (userOpt.isPresent()) {
        User user = userOpt.get();
        if (user.getOtp().equals(otp)) {
            user.setEnabled(true);
            user.setOtp(null); // Clear OTP after verification
            userRepository.save(user);
            return "redirect:/login"; // Redirect to login page after success
        }
    }
    model.addAttribute("email", email); // Retain email for re-rendering
    model.addAttribute("error", "Invalid OTP. Please try again.");
    return "verifyOtp";
}
Workflow
When the user registers:

The email and OTP are saved to the database.
The email is sent to the user with the OTP.
User accesses the OTP verification page:

The email is pre-filled in the input field.
The user enters the OTP received via email.
Upon form submission:

The backend checks if the OTP matches.
On success:
The user is marked as enabled, and the OTP is cleared.
The user is redirected to the login page.
On failure:
The error message is displayed.
This page is simple, secure, and user-friendly, providing the necessary UI for OTP verification. Let me know if you need any enhancements!


